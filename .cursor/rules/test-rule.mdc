---
description: Coding projects via vib coding
globs: 
alwaysApply: true
---

# Your rule content

Code Readability & Style:
Adhere to language-specific style guides (e.g., PEP8 for Python).
Use descriptive, consistent naming for variables, functions, and classes.
Employ auto-formatting tools (like Black) to ensure consistent formatting.
Modularization & Separation of Concerns:

Structure code into small, manageable files or modules, each handling a single responsibility.
Keep individual code files to less than 200 lines to enhance readability and maintainability.
Separate core logic (e.g., perceptron computations) from UI and API layers.
Reuse existing libraries or modules when possible and avoid generating duplicate functionality.
Documentation & Commenting:

Include comprehensive docstrings for all functions, classes, and modules (using formats like Google or NumPy style).
Insert inline comments to explain non-obvious logic and decision points.
Maintain a README or code header summarizing the code’s purpose, usage, and dependencies.
Version Control & Code Reviews:

Follow a Git branching strategy (feature branches, develop, main).
Ensure generated code integrates with existing repositories, using pull requests and peer reviews to maintain quality.
Write clear, concise commit messages that reference relevant issues or tickets.
Testing & Continuous Integration:

Generate accompanying unit tests using frameworks like pytest or unittest.
Include integration tests that validate interactions between different modules.
Produce configuration files (e.g., for GitHub Actions or Travis CI) to support CI/CD pipelines.
Error Handling & Logging:

Incorporate robust error handling to catch and manage exceptions gracefully.
Validate all inputs and external data to prevent errors.
Integrate logging with appropriate log levels (DEBUG, INFO, WARNING, ERROR) for troubleshooting.
Security & Session Management:

Sanitize and validate inputs to prevent injection attacks and other vulnerabilities.
Follow secure coding practices, including secure session management (e.g., secure cookies or token-based systems).
Highlight dependencies and ensure they’re updated to address known security issues.
Performance & Scalability:

Optimize critical code paths with efficient algorithms and data structures.
Include recommendations or examples of caching strategies or asynchronous patterns where appropriate.
Design stateless API endpoints to facilitate horizontal scaling and maintain performance under load.
Code Refactoring & Technical Debt:

Structure generated code to be easily refactorable and maintainable.
Include markers or comments indicating areas for potential future improvement.
Encourage periodic reviews to manage and reduce technical debt over time.
Template and Customization Support:

Allow customization of code templates and style preferences in the generation process.
Generate boilerplate code with placeholders for additional implementation details.
Ensure output is modular and easily extendable to new requirements.
Reuse of Existing Code:

Check for and reference existing modules or functions in the current codebase before generating new code.
Encourage code reuse to avoid redundancy, ensuring that new code integrates smoothly with established functionality.
Provide guidance to refactor common logic into shared utilities when duplicate patterns are detected.






